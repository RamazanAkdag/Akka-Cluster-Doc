actor {
        provider = cluster

        serializers {
            jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
        }

        serialization-bindings {
            "org.example.Command" = jackson-json
        }
    }

provider = cluster -> Akkanın bir cluster şeklinde başlatılacağını gösterir

serializers ->
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-serialization-jackson_2.13</artifactId>
        </dependency>

        bu bağımlılığı ekledikten sonra hangi serileştirme sınıfını kullancağını belirlediğimiz kısım
       JacksonJsonSerializer sınıfını kullanacağımızı belirtiyoruz.

serialization-bindings -> hangi classları hangi serileştirici ile serileştirmek istediğimizi belirtiyoruz
                          böylelikle veri bir yerden bir yere giderken anlaşılabiliyor.
                          org.example.Command sınıfı shared bir modül içerisinde yazdığım bir sınıf. bunu serileştirerek
                          iki modülün ortak kullanabilmesini sağladım.














akka.management {
  cluster.bootstrap {
    contact-point-discovery {
      discovery-method = kubernetes-api
      required-contact-point-nr = 3
    }
  }
}

Bu yapılandırma, Akka Management'ın Kubernetes üzerinde bir küme (cluster) başlatma sürecini nasıl yöneteceğini belirler.

Ayrıntılı Açıklama:
1. akka.management.cluster.bootstrap:
Bu bölüm, Akka'nın bir küme başlatma işlemini (cluster bootstrap) nasıl gerçekleştireceğini tanımlar. Akka, küme düğümlerinin (nodes) birbirlerini otomatik olarak bulmasını sağlar. Kubernetes gibi bir ortamda bu, Akka düğümlerinin, Kubernetes API'si aracılığıyla birbirlerini keşfetmesine olanak tanır.

2. contact-point-discovery:
discovery-method = kubernetes-api: Bu satır, Akka'nın düğümleri keşfetmek için Kubernetes API'sini kullanacağını belirtir. Yani, Akka düğümleri Kubernetes'deki pod bilgilerini sorgulayarak diğer düğümleri bulur ve kümeye bağlanır.

required-contact-point-nr = 3: Bu ayar, kümenin başlatılması için en az 3 düğümle (contact points) bağlantı kurulması gerektiğini belirtir. Akka, yalnızca belirli sayıda düğüm birbirini keşfettikten sonra küme başlatma sürecini tamamlar.

Örneğin: Eğer küme başlatılması için 3 düğüm gerekiyorsa, Kubernetes ortamında çalışan 3 ayrı podun birbirlerini keşfetmesi beklenir. Bu sayı, küme stabilitesi açısından kritik olabilir.



akka.discovery {
  kubernetes-api {
    pod-label-selector = "app=akka-bootstrap-demo"
    pod-namespace = "default"
  }
}

1. Akka Discovery:
akka.discovery.kubernetes-api:
Bu bölüm, Akka'nın Kubernetes API'sini kullanarak diğer düğümleri (pods) keşfetme sürecini ayarlar.

pod-label-selector = "app=akka-bootstrap-demo":

Kubernetes ortamında, Akka düğümlerinin (pods) seçilmesi için kullanılacak etiket (label) filtresini belirtir.
Bu örnekte, app=akka-bootstrap-demo etiketi taşıyan tüm pods Akka tarafından keşfedilebilir.
Yani, Kubernetes'teki bir pod bu etiketi taşıyorsa, Akka bu podu bir küme düğümü olarak değerlendirecektir.
pod-namespace = "default":

Akka, Kubernetes'in default namespace'inde çalışan podsları keşfedecek.
Eğer podslar başka bir namespace'te çalışıyorsa (örneğin, production), bu değeri ilgili namespace adıyla değiştirmek gerekir.





akka.management.cluster.bootstrap.new-cluster-enabled = on


Bu ayar, Akka Cluster Bootstrap özelliğini etkinleştirir ve şu işlevi sağlar:

Yeni bir Akka kümesi oluşturmayı otomatik hale getirir.
Eğer mevcut bir küme yoksa, Akka yeni bir küme başlatır ve düğümleri birbirine bağlar.
Bu özellik, yeni düğümlerin otomatik olarak kümeye katılmasını sağlar ve manuel yapılandırma ihtiyacını ortadan kaldırır.



deployment yaml nasıl oluşturulur
metadata
name: akka-cluster-node-1: Deployment kaynağına verilen isimdir. Kubernetes içinde bu isimle tanınır.
labels: Bu Deployment için tanımlanan etiketlerdir. Etiketler, podların ve servislerin birbirleriyle eşleşmesini sağlar.
app: akka-bootstrap-demo: Bu Deployment, app=akka-bootstrap-demo etiketiyle tanımlanır.


selector
Podların bu Deployment'a ait olduğunu anlamak için kullanılan etiketi tanımlar.
matchLabels: app: akka-bootstrap-demo: app=akka-bootstrap-demo etiketine sahip podlar bu Deployment ile eşleşir.


Konteyner içine geçilecek çevresel değişkenler.

AKKA_CLUSTER_BOOTSTRAP_SERVICE_NAME: Bu düğümün servis adını belirtir. Bu değer, Akka Cluster'ın doğru bir şekilde çalışması için gereklidir.